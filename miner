assert(turtle, "This api is for turtles only")
assert(go, "This api requires the 'go' api")
assert(config, "This api requires the 'config' api")


-- list of junk blocks to avoid mining and toss if necessary
local blacklist = config.get("block_blacklist")

-- list of liquids that can be used as fuel
local liquidfuels = config.get("liquidfuels")

local forwardFail

-- Forward, Down, Up TODO: FIX THESE
go.setFailFunctions(
	function()
		local _, data = turtle.inspect()
		data = b2i(data)
		while turtle.attack() do end
		while turtle.suck(64) do end
		if canFit(data) then turtle.dig() else return false, "inventory full" end
		return true
	end,
	function()
		local _, data = turtle.inspectDown()
		data = b2i(data)
		while turtle.attackDown() do end
		while turtle.suckDown(64) do end
		if canFit(data) then turtle.digDown() else return false, "inventory full" end
		return true
	end,
	function()
		local _, data = turtle.inspectUp()
		data = b2i(data)
		while turtle.attackUp() do end
		while turtle.suckUp(64) do end
		if canFit(data) then turtle.digUp() else return false, "inventory full" end
		return true
	end
)

-- converts block-structured data to item-structured data
function b2i(data)
	if data then
		local out = {}
		out.name = data.name
		out.damage = data.damage or data.metadata
		out.count = data.count or 1
		return out
	end
end

-- returns true if a block is "junk", false otherwise
function isJunk(data)
	if not (data and data.name) then return true end
	if data.metadata then data.damage = data.metadata end
	for k,v in pairs(blacklist) do
		if v.name == data.name then
			if v.damage then
				if v.damage == data.damage then
					return true
				end
			else
				return true
			end
		end
	end
	return false
end

function isLiquidFuel(data)
	if not (data and data.name) then return true end
	if data.metadata then data.damage = data.metadata end
	for k,v in pairs(liquidfuels) do
		if v.name == data.name then
			if v.damage then
				if v.damage == data.damage then
					return true
				end
			else
				return true
			end
		end
	end
	return false
end

-- detects if the turtle can store the requested amount of a specified block/item
-- if it can, returns true and how much more of specified item could be stored
-- if it cannot, returns false and how many of the specified item would not fit
function canFit(data, amt)
	amt = amt or 1
	if not data.name then
		return false
	end
	for i = 1, 16 do
		local slotData = turtle.getItemDetail(i)
		if (not slotData) or (slotData.name == data.name and slotData.damage == data.damage) then
			amt = amt - turtle.getItemSpace(i)
		end
	end
	if amt <= 0 then
		return true, math.abs(amt)
	else
		return false, amt
	end
end

-- refuels the turtle to a specified target
function refuel(target)
	for i = 1, 16 do
		turtle.select(i)
		if turtle.refuel(0) then
			while turtle.getFuelLevel() < target and turtle.getItemCount(i) > 0 do
				turtle.refuel(1)
			end
		end
		if turtle.getFuelLevel() >= target then
			break
		end
	end
	return turtle.getFuelLevel()
end

function dropoff(emptyEverything)
	local i = 1
	while i <= 16 do
		if turtle.getItemCount(i) > 0 then
			local detal = turtle.getItemDetail(i)
			local lavarefuel = config.get("lavarefuel", false)
			if emptyEverything or not lavarefuel or (lavarefuel and detail.name == "minecraft:bucket") then
				turtle.select(i)
				-- put fuel in fuel chest if possible
				if turtle.refuel(0) then -- check if item is valid fuel
					if not turtle.dropUp(64) then turtle.drop(64) end
				else
					turtle.drop(64)
				end
			end
		end
		i = i + 1
	end 
end

function tossJunk(direction)
	local direction = direction or "down"
	for i = 1, 16 do
		if turtle.getItemCount(i) > 0 and isJunk(turtle.getItemDetail(i)) then
			turtle.select(i)
			if direction == "up" then
				turtle.dropUp()
			elseif direction == "forward" then
				turtle.drop()
			else
				turtle.dropDown()
			end
		end
	end
end

function findBucket()
	if not config.get("lavarefuel") then return false end
	for i = 1, 16 do
		local data = turtle.getItemDetail(i)
		if data and data.name == "minecraft:bucket" then
			turtle.select(i)
			return true
		end
	end
	return false
end

function mineSides()
	turtle.select(1)
	for i = 1, 4 do
		local success, data = turtle.inspect()
		if success then
			data = b2i(data)
			while turtle.suck(64) do end
			if not isJunk(data) then
				if canFit(data) then
					turtle.dig()
				else
					return false, "inventory full"
				end
			end
			if isLiquidFuel(data) then
				if findBucket() then turtle.place() turtle.refuel(1) end
			end
		end
		go.right()
	end
	return true
end

function mineShaft()
	while true do
		local success, err = mineSides()
		if not success then
			return false, err
		end
		if freeSlots() < 2 then
			miner.tossJunk("down")
			if freeSlots() < 2 then
				return false, "inventory full"
			end
		end
		local blockExists, data = turtle.inspectDown()
		if blockExists then
			data = b2i(data)
			if data then
				if isLiquidFuel(data) then
					if findBucket() then turtle.placeDown() turtle.refuel(1) end
				elseif isJunk(data) then
					if not turtle.digDown() then break end
				else
					if canFit(data) then
						if not turtle.digDown() then break end
					else
						return false, "inventory full"
					end
				end
			end
			while turtle.attackDown() do end
		end
		if not go.down() then break end
	end
	go.goto(nil, -1, nil)
	return true
end

function freeSlots()
	local freeslots = 0
	for i = 1, 16 do
		if turtle.getItemCount(i) == 0 then
			freeslots = freeslots + 1
		end
	end
	return freeslots
end