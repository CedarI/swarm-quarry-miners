assert(turtle, "This program is for turtles only")

local function loadAPI(file)
	local e = {}
	setmetatable(e, {__index = _G})
	local api
	if load then
		-- 5.2 compat
		local f = fs.open(file,"r")
		local data = f.readAll()
		f.close()
		api = load(data,fs.getName(file),nil,e)
	else
		-- 5.1 only
		api = loadfile(file)
		setfenv(api, e)
	end
	local ok, err = pcall(api)
	if ok then
		local out = {}
		for k,v in pairs(e) do
			out[k] = v
		end
		return out
	else
		return false, err
	end
end

local go, err = loadAPI("relgo")
if go then
	_G.go = go
else
	error("failed to load api: "..err)
end

local config, err = loadAPI("config")
if config then
	_G.config = config
	config.init(".swarmconfig")
else
	error("failed to load api: "..err)
end

local miner, err = loadAPI("miner")
if miner then
	_G.miner = miner
else
	error("failed to load api: "..err)
end

local json, err = loadAPI("json")
if json then
	_G.json = json
else
	error("failed to load api: "..err)
end

if (go and config and miner and json) then
	print("All APIs loaded successfully.")
else
	error("Failed to load APIs!")
end

if config.get("autoname", true) then
	-- set turtle label automatically to prevent fuel loss on break
	if not os.getComputerLabel() then
		local label = "turtle_"..os.getComputerID()
		os.setComputerLabel(label)
		print("Computer label set to "..label)
	end
end

local enableDebug = false

local function debug(str)
	if enableDebug then
		print(str)
	end
end

function addToken(request)
	local authtoken = config.get("authtoken")
	if authtoken then
		return request .. "&token=" .. authtoken
	else
		return request
	end
end

function getShaft()
	local request = addToken(config.get("host") .. "/swarm/" .. config.get("swarmname") .."/claimshaft/?id=" .. os.getComputerID())
	local data = http.get(request)
	if data then
		local t = json.decode(data.readAll())
		if t.success then 
			t.success.z = t.success.z + config.get("shaft_z_offset", 2)
			return t.success
		else
			return false, t.error
		end
	else
		return false, "no response"
	end
end

function markFinished(shaft)
	local request = addToken(config.get("host") .. "/swarm/" .. config.get("swarmname") .."/finishedshaft/?x=" .. shaft.x .. "&z=" .. shaft.z)
	local data = http.get(request)
	if data then
		local t = json.decode(data.readAll())
		if t.success then return t.success else
			return false, t.error
		end
	else
		return false, "no response"
	end
end

function sendTravelPosition(x, y, z)
	if type(x) == "table" then
		y = x.y
		z = x.z
		x = x.x
	end
	local cPos = go.getPos() -- current position
	local request = addToken(config.get("host") .. "/swarm/" .. config.get("swarmname") .."/travel/?id=" .. os.getComputerID() .. "&destX=" .. x .. "&destY=" .. y .. "&destZ=" .. z .. "&startX=" .. cPos.x .. "&startY=" .. cPos.y .. "&startZ=" .. cPos.z)
	local data = http.get(request)
	if data then
		local t = json.decode(data.readAll())
		if t.success then return t.success else
			config.set("travelSent", true)
			return false, t.error
		end
	else
		return false, "no response"
	end
end

function travelDone(force)
	if force or not config.get("travelSent", false) then return end
	debug("Removing from travel queue...")
	local function sendRequest()
		local request = addToken(config.get("host") .. "/swarm/" .. config.get("swarmname") .."/traveldone/?id=" .. os.getComputerID())
		local data = http.get(request)
		if data then
			local t = json.decode(data.readAll())
			if t.success then return t.success else
				config.set("travelSent", false)
				return false, t.error
			end
		else
			return false, "no response"
		end
	end
	while not sendRequest() do 
		print("No response from server! Waiting..")
		sleep(30)
	end
end

local function travel(x, y, z, f)
	if x == nil then
		x = config.get("travelPosition")
		if not x then
			print("No travel position found! Resetting...")
			travelDone()
			config.set("state", "prep")
			return false
		end
	end
	if type(x) == "table" then
		y = x.y
		z = x.z
		f = x.f
		x = x.x -- Must be last
	end
	local cPos = go.getPos()
	x = x or cPos.x
	y = y or cPos.y
	z = z or cPos.z
	f = f or cPos.f
	if (cPos.x == x and cPos.y == y and cPos.z == z and cPos.f == f) then return true end
	config.set("travelPosition", { x = x, y = y, z = z, f = f })
	config.set("state", "traveling")
	local ready
	local sleepTime = config.get("travelSleepTime", 3)
	while not ready do
		ready, err = sendTravelPosition(x, y, z)
		if ready then
			debug("Travel permission acquired from server!")
			break;
		end
		if err == "no response" then
			print("No response from server! Increasing sleep time")
			sleepTime = 30
		end
		print(err)
		print("Not ready to travel, waiting...")
		sleep(sleepTime)
	end
	local success, err = go.goto(x, y, z, f)
	if not success then
		print("Error traveling!!")
	end
	return success, err
end

-- returns whether the turtle needs fuel and how much needed in total
local function needFuel()
	local shaft = config.get("shaft")
	if not shaft then return false end
	-- check if turtle has enough fuel
	local needed = config.get("fuelspare", 25)
	needed = needed + go.fuelTo(shaft.x, nil, shaft.z)
	needed = needed + 70 * 2 -- for actual mining - assume 70 depth TODO: Calculate depth
	needed = needed + go.fuelTo(config.get("dropoff"), { x = shaft.x, nil, z = shaft.z})
	return miner.refuel(needed) < needed, needed
end

-- Get fuel and empty inventory
local function stockUp()
	local function emptyInv()
		print("Dropping off items")
		travel(config.get("dropoff"))
		config.set("state", "stockUp")
		miner.tossJunk("down")
		miner.dropoff()
	end
	local turtleNeedsFuel, amountNeeded = needFuel()
	if turtleNeedsFuel then
		if not go.canReach(config.get("dropoff")) then
			print("Please add fuel!")
			while not go.canReach(config.get("dropoff")) do
				os.pullEvent()
				miner.refuel(go.fuelTo(config.get("dropoff")))
			end
		end
		print("Getting more fuel")
		local success, err = travel(config.get("dropoff"))
		if not success then
			print("Error going to drop off!")
			travelDone()
			error(err)
		end
		emptyInv()
		while (turtle.getFuelLevel() < amountNeeded) do
			turtle.suckUp(64)
			miner.refuel(amountNeeded + config.get("fuelbuffer", 256 + config.get("width", 0) + config.get("height", 0)))
		end
		miner.dropoff()
	elseif miner.freeSlots() < config.get("freeslots", 10) then
		emptyInv()
	end
	config.set("state", "prep")
end

local function preperation()
	if not config.get("shaft") then
		-- get a shaft
		print("Getting shaft info...")
		local shaft, err = getShaft()
		if shaft then
			config.set("shaft", shaft)
		else
			if err == "no response" then
				print("Server not responding. Retrying in 30 seconds.")
				sleep(30)
			elseif err == "no remaining shafts" then
				print("All shafts mined.")
				config.set("state", "done")
			end
		end
	end
	local shaft = config.get("shaft")
	if shaft then
		-- prepare to mine the shaft
		print("Preparing to mine at " .. shaft.x .. ", " .. shaft.z)
		config.set("state", "stockUp")
		stockUp()
		print("Going to shaft X: " .. shaft.x .. " Z: " .. shaft.z)
		local pos = go.getPos()
		local dPos = config.get("dropoff")
		if pos.x == dPos.x and pos.z == dPos.z then
			local success, err = go.goto(nil, nil, config.get("shaft_z_offset", 2))
			if not success then
				print("Error going to origin!")
				error(err)
			end
			config.set("state", "prep")
		end
		local success, err = travel(shaft.x, 0, shaft.z)
		travelDone() -- clear travel paths from server
		if not success then
			print("Error going to shaft!")
			error(err)
		end
		config.set("state", "mining")
	end
end

local function mining()
	local miningPos = config.get("mining_pos", false)
	local shaft = config.get("shaft")
	if miningPos then
		config.set("mining_pos", nil)
		if miningPos.x == shaft.x and miningPos.z == shaft.z then
			travel(miningPos.x, 0, miningPos.z)
			go.goto(nil, miningPos.y, nil)
		else
			print("Paused position does not equal shaft position!!!")
			print("Resetting...")
			config.set("state", "prep")
			return
		end
	end
	local success, err = miner.mineShaft()
	if not success then
		if err == "inventory full" then
			config.set("mining_pos", go.getPos())
			config.set("state", "stockUp")
			stockUp()
			config.set("state", "mining")
			return
		end
	end
	while true do
		local ok, err = markFinished(config.get("shaft"))
		if not ok or err then
			if err == "shaft not found" then
				print("Shaft not found on server. Assuming it's finished!")
				break
			else
				print("Error marking shaft as finished!")
				print("Retrying in 30 seconds.")
				sleep(30)
			end
		else
			print("Marked shaft as finished!")
			break
		end
	end
	config.set("shaft", nil)
	config.set("state","prep")
end

local function finish()
	-- mining complete, clean up and uninstall
	print("Quarry complete, dropping off items and uninstalling.")
	travel(config.get("dropoff"))
	travelDone()
	miner.tossJunk("down")
	miner.dropoff(true)
	-- uninstall
	fs.delete(".position")
	fs.delete(".swarmconfig")
	fs.delete("miner")
	fs.delete("json")
	fs.delete("relgo")
	fs.delete("config")
	fs.delete("startup")
	fs.delete("swarm")
	print("Uninstall completed.")
end

if config.get("host") and config.get("dropoff") and config.get("swarmname") then
	-- local host = config.get("host")
	-- local dropoff = config.get("dropoff")
	-- local name = config.get("swarmname")
	-- resume states:
	-- prep - preparing to mine new shaft
	-- mining - currently mining a shaft(also needs coords)
	-- done - mining is complete
	while true do
		local state = config.get("state", "prep")
		travelDone() -- Just in case
		if state == "prep" then
			preperation()
		elseif state == "traveling" then
			travel()
		elseif state == "stockUp" then
			stockUp()
		elseif state == "mining" then
			mining()
		elseif state == "done" then
			finish()
			break
		end
	end
else
	error("Corrupt or missing config file, program cannot continue")
end